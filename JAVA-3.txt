# DAY 3 

### Interfaces, Polymorphism & Abstraction

**Polymorphism** - Subclasses of a class can define their own unique behaviors and yet share some of the same functionality of the parent class. An instance of a class or object can behave or function as if it were a different class or type of object, but have it’s own specific attributes and methods. Along with overloading methods, another form of polymorphism is overriding methods. https://docs.oracle.com/javase/tutorial/java/IandI/polymorphism.html

**Abstraction** - The process of hiding the implementation details and showing only the functionality. Java provides Abstract classes and Interfaces as an implementation of Abstraction. When should you use an interface and when should you use an abstract? An interface should be used when you want to provide classes with specific methods to implement, classes can implement multiple interfaces but they don’t have to share a similar class hierarchy. An abstract class provides a base providing a model from which a subclass should follow. It will be the one and only superclass, but can provide a base that allows for abstract methods to be implemented in various ways while providing some methods predefined in the abstract class.

**Interfaces** are pretty important in the world of Java and they go pretty deep, we won't need to know everything an interface can do but there are a few core principlies and design patterns you should know.  Interfaces act as a contract between two classes, each class that interfaces with the interface should be able to write their code without any knowledge of how the other group's code is written.

Consider this, Noelle is working on a software project, she want to let me help out, but while I work on something she wants to work on other parts of her project. She writes and interface that defines the method signature and tell me that my Java class has to use this interface. She doesn't really care how I write my code, but it's gotta work and it's got to fit the standards of her software.

Interfaces are also a way to gain some of the advantages of multiple inheritence of Classes in Java without some of the concerns that come with direct multiple inheritence since interfaces cannot be instantiated. Class can implement more than once interface. The way they avoid the disadvantages of multiple inheritence is by making interfaces have no state and no implementation i.e. they cannot be instantiated.

https://docs.oracle.com/javase/tutorial/java/IandI/createinterface.html

**Abstract Class** - They can contain state such as member variables and methods that do not have to be implemented by subclasses. Also, subclasses do not have to implement abstract methods of the parent class.

https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html 

#### Consider using abstract classes if any of these statements apply to your situation:
 You want to share code among several closely related classes.
* You expect that classes that extend your abstract class have many common methods or fields, or require access modifiers other than public (such as protected and private).
* You want to declare non-static or non-final fields. This enables you to define methods that can access and modify the state of the object to which they belong.
#### Consider using interfaces if any of these statements apply to your situation:
* You expect that unrelated classes would implement your interface. For example, the interfaces Comparable and Cloneable are implemented by many unrelated classes.
* You want to specify the behavior of a particular data type, but not concerned about who implements its behavior.
* You want to take advantage of multiple inheritance of type.

**POJO & Java Beans** - Normal objects instantiated from a class.
* Member variables must be private, but accessible using get and set
* Must have a zero argument constructor
* Must implement the serializable interface